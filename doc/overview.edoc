@title Rebar3 Diameter Compiler Plugin
@author Carlos Eduardo de Paula
@copyright 2025 Carlos Eduardo de Paula

@doc
<h1>Rebar3 Diameter Compiler Plugin</h1>

<p>A rebar3 plugin for compiling <a href="http://erlang.org/doc/man/diameter.html">Diameter</a> protocol dictionary files (.dia) in Erlang projects. This plugin automatically discovers, resolves dependencies, and compiles .dia files to generate the corresponding .erl and .hrl files needed for Diameter applications.</p>

<h2>Features</h2>

<ul>
<li><strong>Automatic Discovery:</strong> Finds all .dia files in your project's dia/ directory</li>
<li><strong>Dependency Resolution:</strong> Analyzes @inherits directives and compiles files in correct order</li>
<li><strong>Configurable Output:</strong> Customizable source and include output directories</li>
<li><strong>Integration:</strong> Seamlessly integrates with rebar3 build process via provider hooks</li>
<li><strong>Cleanup:</strong> Provides clean command to remove generated files</li>
<li><strong>Cross-Platform:</strong> Works across different OTP versions (24-28+)</li>
</ul>

<h2>Installation</h2>

<h3>From Hex.pm (Recommended)</h3>

<p>Add the plugin to your rebar.config:</p>

<pre>
{plugins, [
    rebar3_diameter_compiler
]}.

{provider_hooks, [
    {pre, [
        {compile, {diameter, compile}},
        {clean, {diameter, clean}}
    ]}
]}.
</pre>

<h3>From GitHub</h3>

<p>For development or latest features:</p>

<pre>
{plugins, [
    {rebar3_diameter_compiler, {git, "https://github.com/carlosedp/rebar3_diameter_compiler.git", {branch, "main"}}}
]}.

{provider_hooks, [
    {pre, [
        {compile, {diameter, compile}},
        {clean, {diameter, clean}}
    ]}
]}.
</pre>

<h2>Usage</h2>

<h3>Basic Usage</h3>

<p>Once configured with provider hooks, the plugin runs automatically:</p>

<pre>
$ rebar3 compile
===> Compiling diameter files...
===> Compiling diameter_3gpp_base.dia
===> Compiling myapp.dia
</pre>

<h3>Manual Commands</h3>

<p>You can also run the plugin commands directly:</p>

<pre>
# Compile diameter files
$ rebar3 diameter compile

# Clean generated files
$ rebar3 diameter clean
</pre>

<h2>Configuration</h2>

<p>The plugin supports several configuration options in your rebar.config:</p>

<h3>Diameter Options (dia_opts)</h3>

<pre>
{dia_opts, [
    {outdir, "custom_src"},           % Output directory for .erl files (default: "src")
    {include, ["deps/diameter_base"]}, % Additional include paths
    {recursive, true}                 % Recursively search for .dia files (default: true)
]}.
</pre>

<h3>Compilation Order (dia_first_files)</h3>

<p>Specify files that should be compiled first, useful for base dictionaries:</p>

<pre>
{dia_first_files, [
    "diameter_base.dia",
    "diameter_3gpp_base.dia"
]}.
</pre>

<h3>Selective Compilation (dia_only_files)</h3>

<p>Compile only specific dictionaries instead of all discovered .dia files:</p>

<pre>
{dia_only_files, [
    "diameter_3gpp_base",    % Dictionary names (without .dia extension)
    "my_custom_dictionary"
]}.
</pre>

<h2>Project Structure</h2>

<p>The plugin expects and generates files in the following structure:</p>

<pre>
myapp/
├── dia/                    % Source .dia files
│   ├── diameter_base.dia
│   ├── my_dictionary.dia
│   └── custom_app.dia
├── src/                    % Generated .erl files (configurable)
│   ├── diameter_base.erl
│   ├── my_dictionary.erl
│   └── custom_app.erl
├── include/                % Generated .hrl files
│   ├── diameter_base.hrl
│   ├── my_dictionary.hrl
│   └── custom_app.hrl
└── rebar.config
</pre>

<h2>Dependency Management</h2>

<p>The plugin automatically handles dependencies declared with @@inherits directives in .dia files:</p>

<pre>
;; In my_dictionary.dia
@@name my_dictionary
@@inherits diameter_base

;; This will ensure diameter_base is compiled before my_dictionary
</pre>

<p>The dependency resolver:</p>
<ul>
<li>Parses all .dia files to extract @@inherits directives</li>
<li>Builds a dependency graph</li>
<li>Performs topological sort to determine compilation order</li>
<li>Detects circular dependencies and reports errors</li>
</ul>

<h2>Generated Files</h2>

<p>For each .dia file, the plugin generates:</p>

<ul>
<li><strong>.erl file:</strong> Erlang module with diameter codec functions</li>
<li><strong>.hrl file:</strong> Header file with record definitions and constants</li>
<li><strong>.beam file:</strong> Compiled bytecode (automatically loaded)</li>
</ul>

<h2>Examples</h2>

<h3>Basic Diameter Dictionary</h3>

<pre>
;; File: dia/my_app.dia
@@name my_app
@@vendor 12345 "My Company"

@@avp_types
My-AVP 1000 Unsigned32 M

@@messages
My-Request ::= &lt; Diameter Header: 1001, REQ, PXY &gt;
              { My-AVP }

My-Answer ::= &lt; Diameter Header: 1001, PXY &gt;
             { Result-Code }
             [ My-AVP ]
</pre>

<h3>Dictionary with Inheritance</h3>

<pre>
;; File: dia/my_extension.dia
@@name my_extension
@@inherits my_app

@@avp_types
Extension-AVP 2000 UTF8String M

@@messages
Extended-Request ::= &lt; Diameter Header: 2001, REQ, PXY &gt;
                    { My-AVP }
                    { Extension-AVP }
</pre>

<h2>Integration with Diameter Application</h2>

<p>Once compiled, use the generated modules in your Diameter application:</p>

<pre>
%% Start diameter service with compiled dictionary
diameter:start_service(my_service, [
    {application, [{dictionary, my_app},
                   {module, my_app_callback}]}
]).
</pre>

<h2>Troubleshooting</h2>

<h3>Common Issues</h3>

<dl>
<dt><strong>Compilation Errors</strong></dt>
<dd>Check .dia file syntax and ensure all @inherits dependencies are available</dd>

<dt><strong>Missing Dependencies</strong></dt>
<dd>Verify that inherited dictionaries are present in the dia/ directory</dd>

<dt><strong>Generated Files Not Found</strong></dt>
<dd>Check dia_opts outdir configuration and ensure directories exist</dd>

<dt><strong>Circular Dependencies</strong></dt>
<dd>Review @@inherits directives to eliminate circular references</dd>
</dl>

<h3>Debug Mode</h3>

<p>Enable verbose logging to see detailed compilation information:</p>

<pre>
$ DEBUG=1 rebar3 diameter compile
</pre>

<h2>Contributing</h2>

<p>Contributions are welcome! Please see the GitHub repository for:</p>
<ul>
<li>Bug reports and feature requests</li>
<li>Pull requests</li>
<li>Documentation improvements</li>
</ul>

<p>Repository: <a href="https://github.com/carlosedp/rebar3_diameter_compiler">https://github.com/carlosedp/rebar3_diameter_compiler</a></p>

@end
